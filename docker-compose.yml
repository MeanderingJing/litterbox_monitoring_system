version: '3.8'
services:
  db:
    image: postgres:16
    container_name: litterbox_postgres_db
    environment:
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_password
      POSTGRES_DB: example_db
    volumes:
      - ./docker-data/.pg-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U example_user -d example_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - litterbox-network

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: litterbox-rabbitmq-server
    ports:
      - "15672:15672"  # RabbitMQ Management UI
      - "5672:5672"    # RabbitMQ AMQP protocol
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - ./.docker-data/.rabbitmq-data:/var/lib/rabbitmq
    networks:
      - litterbox-network

  litterbox_simulator:
    build:
      context: ./backend
      dockerfile: src/data_source/Dockerfile
    container_name: litterbox_data_source_simulator
    depends_on:
      rabbitmq:
        condition: service_healthy

    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: user
      RABBITMQ_PASSWORD: password

    volumes:
      - ./.docker-data/.simulated_litterbox_data:/app/simulated_litterbox_data
    command: ["python", "data_source/litterbox_edge_device_simulator.py"]
    restart: unless-stopped
    networks:
      - litterbox-network

  # TO CHECK
  data_persister:
    build:
      context: ./backend
      dockerfile: src/data_persister/Dockerfile
    container_name: litterbox_data_persister
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: user
      RABBITMQ_PASSWORD: password
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_password
      POSTGRES_DB: example_db
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      litterbox_simulator:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; import os; pika.BlockingConnection(pika.URLParameters(os.getenv('RABBITMQ_URL'))).close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s  # Give time for dependencies to start
    volumes:
      - ./.docker-data/.litterbox_data:/app/litterbox_data

    command:
      - /bin/sh
      - -c
      - |
        echo "Waiting for simulator to produce initial data..."
        sleep 10
        python data_persister/data_persister.py
    networks:
      - litterbox-network

networks:
  litterbox-network:
    driver: bridge





